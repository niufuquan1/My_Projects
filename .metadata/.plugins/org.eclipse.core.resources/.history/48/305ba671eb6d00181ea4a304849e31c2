package net.chenlin.dp.modules.kdecm.controller;



import static org.assertj.core.api.Assertions.offset;

import java.util.ArrayList;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import net.chenlin.dp.common.annotation.SysLog;
import net.chenlin.dp.modules.sys.controller.AbstractController;
import net.chenlin.dp.modules.sys.entity.SysUserEntity;
import net.sf.json.JSONArray;
import net.chenlin.dp.common.entity.Page;
import net.chenlin.dp.common.entity.R;
import net.chenlin.dp.modules.kdecm.entity.ProGroupEntity;
import net.chenlin.dp.modules.kdecm.service.ProGroupService;


/**
 * 
 *
 * @author ZhouChenglin
 * @email yczclcn@163.com
 * @url www.chenlintech.com
 * @date 2018年5月28日 下午9:27:22
 */
@RestController
@RequestMapping("/kdecm/group")
public class ProGroupController extends AbstractController {
	
	@Autowired
	private ProGroupService proGroupService;
	
	/**
	 * 列表
	 * @param params
	 * @return
	 */
	@RequestMapping("/list")
	public Page<ProGroupEntity> list(@RequestBody Map<String, Object> params) {
		return proGroupService.listProGroup(params);
	}
		
	/**
	 * 新增
	 * @param proGroup
	 * @return
	 */
	@SysLog("新增")
	@RequestMapping("/save")
	public R save(@RequestBody ProGroupEntity proGroup) {
		return proGroupService.saveProGroup(proGroup);
	}
	
	/**
	 * 根据id查询详情
	 * @param id
	 * @return
	 */
	@RequestMapping("/info")
	public R getById(@RequestBody Long id) {
		return proGroupService.getProGroupById(id);
	}
	
	/**
	 * 修改
	 * @param proGroup
	 * @return
	 */
	@SysLog("修改")
	@RequestMapping("/update")
	public R update(@RequestBody ProGroupEntity proGroup) {
		return proGroupService.updateProGroup(proGroup);
	}
	
	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@SysLog("删除")
	@RequestMapping("/remove")
	public R batchRemove(@RequestBody Long[] id) {
		return proGroupService.batchRemove(id);
	}
	
	/*@RequestMapping(value="/GetData",method=RequestMethod.POST)
	@ResponseBody
    public String getDatas() {
        return "data";
    }*/
	 /*
	@RequestMapping(value = "/GetUserList", method = RequestMethod.POST, produces = "application/json")  
    public @ResponseBody Map ListSysUser(Model model, ServletRequest request,HttpServletRequest req) {  
       
        Map<String , Object> map = new LinkedHashMap<String, Object>();  
 
        map.put("createdUser","jiabaochina");  
        map.put("score", 5);  
        map.put("status", "success");
        System.out.println(map);
        
        String id = request.getParameter("id");
        String name = request.getParameter("name");
        String sex= request.getParameter("sex");
        System.out.println(id+" "+name+" "+sex);
        return map;  
        
    }  */
	
	@RequestMapping(value = "/GetUserList", method = RequestMethod.POST, produces = "application/json")  
    public @ResponseBody List<SysUserEntity> ListSysUser(Model model, ServletRequest request,HttpServletRequest req) {  
        List<SysUserEntity> list = new ArrayList<>();
        list = proGroupService.listSysUser();
        return list;
        }
	
	@RequestMapping(value = "/GetUserSelect", method = RequestMethod.POST, produces = "application/json")  
    public @ResponseBody int SysUserSelect(Model model, ServletRequest request,HttpServletRequest req) {  
  
		int flag = -1;
		int groupid = proGroupService.MaxGroupID();//从数据库中查找到组号;
		groupid++;//自增一位后得到本组组号
		//System.out.println(groupid+"----------------");
		String groupName = request.getParameter("groupName");//获得前台的以json格式封装的字符串
		System.out.println(groupName);
		String createUserId = request.getParameter("createUserId");
		System.out.println(createUserId);
		String userIdList = request.getParameter("userIdList");
		System.out.println(userIdList);
		/*try {
			JSONObject userIdListJson = new JSONObject(userIdList);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		//进行用户ID解析,例如["1","2","3"]
		ArrayList<String> arrayuserIdList = new ArrayList<String>();  
		JSONArray jsonArray = JSONArray.fromObject(userIdList);
		for (int i = 0; i < jsonArray.size(); i++) {  
			String userId = jsonArray.getJSONObject(i).getString("userid");
			arrayuserIdList.add(userId);
		}
		
		//创建批注组实例对象，进行数据持久化操作
		ProGroupEntity proGroupEntity = new ProGroupEntity();
		proGroupEntity.setGroupId(groupid);
		proGroupEntity.setGroupName(groupName);
		proGroupEntity.setUserId(Long.valueOf(createUserId));
		int flag1 = proGroupService.addGroup(proGroupEntity);
		List<Integer> flag2 = new ArrayList<Integer>();
		//创建批注组组员对象表
		for(int j=0;j<arrayuserIdList.size();j++) {
			//System.out.println(arrayuserIdList.get(j));
			flag2.add(proGroupService.addGroupUser(groupid, Integer.parseInt(arrayuserIdList.get(j))));
		}
		if(flag1 > 0&& flag2.isEmpty()!=true ) {
			return 1;
		}else {
			return -1;
		}   
	}
	
	@RequestMapping(value = "/ChangeGroupProperty", method = RequestMethod.POST, produces = "application/json")  
    public @ResponseBody Integer ChangeGroupProperty(Model model, ServletRequest request,HttpServletRequest req) {  
        int openNessProperty = Integer.parseInt(request.getParameter("openNess"));
        
        }
	
	@RequestMapping(value = "/findGroupIdList", method = RequestMethod.POST, produces = "application/json")  
    public @ResponseBody List<ProGroupEntity> ListGroupEneity(Model model, ServletRequest request,HttpServletRequest req) {  
        int userID = Integer.parseInt(request.getParameter("userID"));
		List<ProGroupEntity> list = new ArrayList<>();
        list = proGroupService.listGroup(userID);
        return list;
        }
}
